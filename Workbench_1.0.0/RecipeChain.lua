---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Senef.
--- DateTime: 15/11/2022 10:33
---

local Is = require('__stdlib__/stdlib/utils/is')
local Table = require('__stdlib__/stdlib/utils/table')

RecipeChain = {
    recipes = {},
    recipesProcess = 0,
    recipesSkip = 0,
    nextRecipe = nil,
    previousRecipe = nil,
    owner = nil,
    associate = {}
}
RecipeChain.__index = RecipeChain


function RecipeChain:new(recipes,owner)

    local chain = {}
    setmetatable(chain,RecipeChain)
    chain.owner = owner
    if(Is.Nil(recipes) or Table.is_empty(recipes) )then
        log("No recipes for the chain")

        return chain
    end
    chain.recipes = recipes
    chain.nextRecipe = recipes[1]
    return chain
end


--add recipe to the current crafting chain
function RecipeChain.add(recipe)

    if(Is.Nil)then
        log("No recipe")
        return
    end

    local existRecipe = Table.find(self.recipes,function(r) return r.luaRecipe.name == recipe.luaRecipe.name  end)

    if(Is.Nil(existRecipe))then
        recipe.index = table.insert(self.recipes,recipe)
    end
end

function RecipeChain.remove(recipe)
    if(Is.Nil or Is.Nil(recipe.index))then
        log("Can't remove a null recipe or a recipe without index")
        return
    end


    return Utils:removeAndReindex(self.recipes,recipe.index)
end

function RecipeChain.processChain(workbench)

    if(Is.Nil(workbench))then
        log("No workbench")
        return
    end

    local orderTable = {}

    for i = 0, -5 do
      table.insert(orderTable,Table.filter(self.recipes,function(recipe) return recipe.discard == i  end))
    end

    self.recipes = orderTable

    workbench.verify()

    for _, recipe in pairs(self.recipes) do

        if(recipe.discard < 0 and not recipe.skip and recipe.skipTime <= 0)then
            recipe.discard = recipe.discard + 1
        end

        if(recipe.skipTime > 0)then
            recipe.skipTime = recipe.skipTime - 1
        else if recipe.skipTime <= 0 and recipe.skip then
            recipe.skip = false

            end
        end

        workbench.setRecipe(recipe,false)

    end
end


    function switch(c)
        local swtbl = {
            casevar = c,
            caseof = function (self, code)
                local f
                if (self.casevar) then
                    f = code[self.casevar] or code.default
                else
                    f = code.missing or code.default
                end
                if f then
                    if type(f)=="function" then
                        return f(self.casevar,self)
                    else
                        error("case "..tostring(self.casevar).." not a function")
                    end
                end
            end
        }
        return swtbl
    end












